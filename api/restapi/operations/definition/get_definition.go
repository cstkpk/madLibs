// Code generated by go-swagger; DO NOT EDIT.

package definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDefinitionHandlerFunc turns a function with the right signature into a get definition handler
type GetDefinitionHandlerFunc func(GetDefinitionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDefinitionHandlerFunc) Handle(params GetDefinitionParams) middleware.Responder {
	return fn(params)
}

// GetDefinitionHandler interface for that can handle valid get definition params
type GetDefinitionHandler interface {
	Handle(GetDefinitionParams) middleware.Responder
}

// NewGetDefinition creates a new http.Handler for the get definition operation
func NewGetDefinition(ctx *middleware.Context, handler GetDefinitionHandler) *GetDefinition {
	return &GetDefinition{Context: ctx, Handler: handler}
}

/* GetDefinition swagger:route GET /definition definition getDefinition

Get the full definition for one word from the entries table

Retrieve a row from the entries table and any other entries of additional
definitions for the same word.


*/
type GetDefinition struct {
	Context *middleware.Context
	Handler GetDefinitionHandler
}

func (o *GetDefinition) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetDefinitionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
